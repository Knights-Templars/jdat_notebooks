Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def Modelcero(x):
    """Simple model of 0 to initialize some models"""
    return 0*x

#powerlaw, zblackbody, gaussian and drude functions wrap existing astropy models.
#lmfit requires wavelength (x) to be passed as function parameter.

def powerlaw(x, c1, c2):
    """power law function (c1*nu^c2) normalized at 1 micron, with positive index convention"""
    x0=1.0  #Normalize at  1 micron
    c2=-c2
    return models.PowerLaw1D.evaluate(x,c1,x0,c2)

def zblackbody(x, OnePlusZ, T, scale):
    """black body function"""
    xs=x*u.um/OnePlusZ
    bb=models.BlackBody(T*u.K, scale)
    return bb(xs)

def gaussian(x, amplitude, xcen, std):
    """1-d gaussian"""
    return models.Gaussian1D.evaluate(x,amplitude,xcen,std)   

def drude(x, amplitude, peakx, frac_FWHM):
    """dust emission"""
    FWHM=peakx*frac_FWHM
    return models.Drude1D.evaluate(x,amplitude,peakx,FWHM)

#pahdust and sidust functions do not exist in astropy

def pahdust(x, OnePlusZ, amplitude_76, amplitude_113):
    """PAH dust emission"""
    
    #Ionized PAH features
    PAH_peakx=     [ 5.27, 5.70, 6.22, 6.69, 7.42, 7.60, 7.85, 8.33, 8.61]
    PAH_frac_FWHM= [0.034,0.035, 0.030,0.07, 0.126,0.044,0.053,0.050, 0.039]
    PAH_rel_amplitude= [0.0,  0.0,   0.8,  0.0,  0.0,  1.0,  0.6,  0.0,   0.5]
    PAH_amplitude=[]
    for ampl in PAH_rel_amplitude: PAH_amplitude.append(amplitude_76*(ampl/PAH_rel_amplitude[5]))
 
    #Neutral PAH features
    PAH_peakx+=    [10.68, 11.23,11.33]
    PAH_peakx+=    [11.99,12.62,12.69,13.48,14.04,14.19,15.90, 16.45,17.04,17.375,17.87,18.92]
    PAH_frac_FWHM+=[0.020, 0.012,0.022]
    PAH_frac_FWHM+=[0.045,0.042, 0.013,0.040,0.016,0.025,0.020,0.014,0.065, 0.012, 0.016,0.019]   
    PAH_rel_amplitude= [0.0,  0.6, 1.0]
    PAH_rel_amplitude+=[0.2,  0.3,   0.1,  0.0,  0.1,  0.1,  0.0,   0.0,  0.0,  0.0,   0.0,  0.0]
    for ampl in PAH_rel_amplitude: PAH_amplitude.append(amplitude_113*(ampl/PAH_rel_amplitude[2]))
    
    pahflux=x-x
    for peakx, frac_FWHM, ampl in zip(PAH_peakx,PAH_frac_FWHM,PAH_amplitude):
        pahflux=pahflux+drude(x,ampl,peakx*OnePlusZ,frac_FWHM)

    return pahflux    #Amplitude unit

def sidust(x, T, amplitude):
    """Silicate dust emission"""
    
    #Custom extinction curve built from weighted sum of three components: 
    #two Drude functions and an exponent 1.7 power-law.
    d1=drude(x,0.80,10.0,0.25)
    d2=drude(x,0.25,11.1,0.25)
    #d3=drude(x,0.40,17.0,0.40)  #Outside of wavelength range.
    ext=d1+d2  #+d3

    # Form linear combination of modified silicate and powerlaw.
    beta=0.1
    ext=(1. - beta)*ext + beta*(9.7/x)**1.7
    si_em=amplitude*1.0E-6*3.97289E13/x**3/(exp(1.4387752E4/x/T)-1.)*ext
    
    return si_em

# Enable tabulated extinction functions. Existing options in dust_extinction are insufficient
# at mid-IR wavelengths

def extinction_a(x, tau, a):
    """Extinction from table data"""
    ext=np.interp(x, wave, a)      
    return exp(-tau*ext)

#Read extinction data from Chiar & Tielens (2005)
#Note, this is normalized to extinction in the K-band (1.004 at 2.14 um)
#agal is for Galactic Center, alocal is for local ISM extinction

Boxdata="https://data.science.stsci.edu/redirect/JWST/jwst-data_analysis_tools/cube_fitting/"
wave, agal, alocal = np.loadtxt(Boxdata+'chiar+tielens_2005.dat', skiprows=14, usecols=(0, 1, 2), unpack=True)

#Compare to dust_extinction
#P92 is the only model that extends over the mid-IR range, but it is crude
#Normalized to extinction in the V-band

from dust_extinction.parameter_averages import F99
from dust_extinction.shapes import P92
a92 = P92()

#Extinction Comparison
tau=1.
xa=arange(5.,15.,0.01)
extin1=extinction_a(xa, tau, alocal)
extin2=extinction_a(xa, tau, agal)
lam=xa*u.um
scale=21.9             #Empirical scaling to adjust P2 curve to match Chiar & Tielens Local ISM curve
aa92=scale*a92(lam)
extin3 = exp(-tau*aa92)

with quantity_support():
    plt.plot(lam,extin1,label='CT+05 Local ISM')
    plt.plot(lam,extin2,label='CT+05 Gal. Cen.')
    plt.plot(lam,extin3,label='P92 scaled')
    plt.legend()
    plt.show()

pl1=powerlaw(xa,1.0,-1.0)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Input [0;32mIn [3][0m, in [0;36m<cell line: 86>[0;34m()[0m
[1;32m     81[0m [38;5;66;03m#Read extinction data from Chiar & Tielens (2005)[39;00m
[1;32m     82[0m [38;5;66;03m#Note, this is normalized to extinction in the K-band (1.004 at 2.14 um)[39;00m
[1;32m     83[0m [38;5;66;03m#agal is for Galactic Center, alocal is for local ISM extinction[39;00m
[1;32m     85[0m Boxdata[38;5;241m=[39m[38;5;124m"[39m[38;5;124mhttps://data.science.stsci.edu/redirect/JWST/jwst-data_analysis_tools/cube_fitting/[39m[38;5;124m"[39m
[0;32m---> 86[0m wave, agal, alocal [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43mloadtxt[49m[43m([49m[43mBoxdata[49m[38;5;241;43m+[39;49m[38;5;124;43m'[39;49m[38;5;124;43mchiar+tielens_2005.dat[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mskiprows[49m[38;5;241;43m=[39;49m[38;5;241;43m14[39;49m[43m,[49m[43m [49m[43musecols[49m[38;5;241;43m=[39;49m[43m([49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[38;5;241;43m1[39;49m[43m,[49m[43m [49m[38;5;241;43m2[39;49m[43m)[49m[43m,[49m[43m [49m[43munpack[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[1;32m     88[0m [38;5;66;03m#Compare to dust_extinction[39;00m
[1;32m     89[0m [38;5;66;03m#P92 is the only model that extends over the mid-IR range, but it is crude[39;00m
[1;32m     90[0m [38;5;66;03m#Normalized to extinction in the V-band[39;00m
[1;32m     92[0m [38;5;28;01mfrom[39;00m [38;5;21;01mdust_extinction[39;00m[38;5;21;01m.[39;00m[38;5;21;01mparameter_averages[39;00m [38;5;28;01mimport[39;00m F99

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/numpy/lib/npyio.py:1042[0m, in [0;36mloadtxt[0;34m(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows, like)[0m
[1;32m   1040[0m     fname [38;5;241m=[39m os_fspath(fname)
[1;32m   1041[0m [38;5;28;01mif[39;00m _is_string_like(fname):
[0;32m-> 1042[0m     fh [38;5;241m=[39m [43mnp[49m[38;5;241;43m.[39;49m[43mlib[49m[38;5;241;43m.[39;49m[43m_datasource[49m[38;5;241;43m.[39;49m[43mopen[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mrt[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m)[49m
[1;32m   1043[0m     fencoding [38;5;241m=[39m [38;5;28mgetattr[39m(fh, [38;5;124m'[39m[38;5;124mencoding[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mlatin1[39m[38;5;124m'[39m)
[1;32m   1044[0m     line_iter [38;5;241m=[39m [38;5;28miter[39m(fh)

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/numpy/lib/_datasource.py:193[0m, in [0;36mopen[0;34m(path, mode, destpath, encoding, newline)[0m
[1;32m    156[0m [38;5;124;03m"""[39;00m
[1;32m    157[0m [38;5;124;03mOpen `path` with `mode` and return the file object.[39;00m
[1;32m    158[0m 
[0;32m   (...)[0m
[1;32m    189[0m 
[1;32m    190[0m [38;5;124;03m"""[39;00m
[1;32m    192[0m ds [38;5;241m=[39m DataSource(destpath)
[0;32m--> 193[0m [38;5;28;01mreturn[39;00m [43mds[49m[38;5;241;43m.[39;49m[43mopen[49m[43m([49m[43mpath[49m[43m,[49m[43m [49m[43mmode[49m[43m,[49m[43m [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m,[49m[43m [49m[43mnewline[49m[38;5;241;43m=[39;49m[43mnewline[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/numpy/lib/_datasource.py:532[0m, in [0;36mDataSource.open[0;34m(self, path, mode, encoding, newline)[0m
[1;32m    529[0m     [38;5;28;01mreturn[39;00m _file_openers[ext](found, mode[38;5;241m=[39mmode,
[1;32m    530[0m                               encoding[38;5;241m=[39mencoding, newline[38;5;241m=[39mnewline)
[1;32m    531[0m [38;5;28;01melse[39;00m:
[0;32m--> 532[0m     [38;5;28;01mraise[39;00m [38;5;167;01mFileNotFoundError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mpath[38;5;132;01m}[39;00m[38;5;124m not found.[39m[38;5;124m"[39m)

[0;31mFileNotFoundError[0m: https://data.science.stsci.edu/redirect/JWST/jwst-data_analysis_tools/cube_fitting/chiar+tielens_2005.dat not found.
FileNotFoundError: https://data.science.stsci.edu/redirect/JWST/jwst-data_analysis_tools/cube_fitting/chiar+tielens_2005.dat not found.

