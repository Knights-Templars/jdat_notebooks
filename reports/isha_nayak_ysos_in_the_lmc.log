Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Extract emission lines greater than 13 microns

if len(emissionlines_1) >= 1 and emissionlines_1[0] != 0:
    emissionlines_1['gauss_line_center'] = 0. * u.micron
    emissionlines_1['gauss_line_amp'] = 0. * u.jansky
    emissionlines_1['gauss_line_stddev'] = 0. * u.micron
    emissionlines_1['gauss_line_FWHM'] = 0. * u.micron
    emissionlines_1['gauss_line_area'] = np.log10(1e-20) * u.W / u.m**2

    emissionlines_1['no_AltRestWav'] = 0  # Number of possible lines which could be the feature
    emissionlines_1['RestWav'] = 0.  # RestWavelength of closest lab measured line
    emissionlines_1['diff_ft_wav'] = 0.  # Diff. in initial line wav estimate and the fitted gausian
    emissionlines_1['line_suspect'] = 0  # Set == 1 if large diffrence in wavelength possition
    emissionlines_1['line'] = "                 "  # For storing the line name

    # Loop through all the found emission lines in the spectra
    for idx, emlines in enumerate(emissionlines_1):

        # Look at the region surrounding the found lines from the original smoothed spectrum
        sw_line = emissionlines_1["line_center"][idx].value-0.001
        lw_line = emissionlines_1["line_center"][idx].value+0.001     
        line_region = SpectralRegion(sw_line*u.um, lw_line*u.um)

        # Variable for the line center
        line_cnr = emissionlines_1["line_center"][idx]
        
print(emissionlines_1)

# Extract emission lines less than 13 microns

if len(emissionlines_2) >= 1 and emissionlines_2[0] != 0:
    emissionlines_2['gauss_line_center'] = 0. * u.micron
    emissionlines_2['gauss_line_amp'] = 0. * u.jansky
    emissionlines_2['gauss_line_stddev'] = 0. * u.micron
    emissionlines_2['gauss_line_FWHM'] = 0. * u.micron
    emissionlines_2['gauss_line_area'] = np.log10(1e-20) * u.W / u.m**2

    emissionlines_2['no_AltRestWav'] = 0  # Number of possible lines which could be the feature
    emissionlines_2['RestWav'] = 0.  # RestWavelength of closest lab measured line
    emissionlines_2['diff_ft_wav'] = 0.  # Diff. in initial line wav estimate and the fitted gausian
    emissionlines_2['line_suspect'] = 0  # Set == 1 if large diffrence in wavelength possition
    emissionlines_2['line'] = "                 "  # For storing the line name
    
    # Loop through all the found emission lines in the spectra

    for idx, emlines2 in enumerate(emissionlines_2):

        # Look at the region surrounding the found lines from the original smoothed spectrum
        sw_line = emissionlines_2["line_center"][idx].value-0.01
        lw_line = emissionlines_2["line_center"][idx].value+0.01     
        line_region = SpectralRegion(sw_line*u.um, lw_line*u.um)

        # Variable for the line center
        line_cnr = emissionlines_2["line_center"][idx]     
         
print(emissionlines_2)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [22][0m, in [0;36m<cell line: 3>[0;34m()[0m
[1;32m      1[0m [38;5;66;03m# Extract emission lines greater than 13 microns[39;00m
[0;32m----> 3[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(emissionlines_1) [38;5;241m>[39m[38;5;241m=[39m [38;5;241m1[39m [38;5;129;01mand[39;00m [43memissionlines_1[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m [49m[38;5;241;43m!=[39;49m[43m [49m[38;5;241;43m0[39;49m:
[1;32m      4[0m     emissionlines_1[[38;5;124m'[39m[38;5;124mgauss_line_center[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;241m0.[39m [38;5;241m*[39m u[38;5;241m.[39mmicron
[1;32m      5[0m     emissionlines_1[[38;5;124m'[39m[38;5;124mgauss_line_amp[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;241m0.[39m [38;5;241m*[39m u[38;5;241m.[39mjansky

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/astropy/table/row.py:81[0m, in [0;36mRow.__ne__[0;34m(self, other)[0m
[1;32m     79[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_table[38;5;241m.[39mmasked:
[1;32m     80[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m'[39m[38;5;124mUnable to compare rows for masked table due to numpy.ma bug[39m[38;5;124m'[39m)
[0;32m---> 81[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mas_void[49m[43m([49m[43m)[49m[43m [49m[38;5;241;43m!=[39;49m[43m [49m[43mother[49m

[0;31mTypeError[0m: Cannot compare structured or void to non-void arrays.
TypeError: Cannot compare structured or void to non-void arrays.

