Traceback (most recent call last):
  File "/usr/share/miniconda/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/share/miniconda/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
myfile = AsdfFile(tree1)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Input [0;32mIn [12][0m, in [0;36m<cell line: 1>[0;34m()[0m
[0;32m----> 1[0m myfile [38;5;241m=[39m [43mAsdfFile[49m[43m([49m[43mtree1[49m[43m)[49m

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/asdf.py:175[0m, in [0;36mAsdfFile.__init__[0;34m(self, tree, uri, extensions, version, ignore_version_mismatch, ignore_unrecognized_tag, ignore_implicit_conversion, copy_arrays, lazy_load, custom_schema, _readonly)[0m
[1;32m    173[0m     [38;5;28mself[39m[38;5;241m.[39mfind_references()
[1;32m    174[0m [38;5;28;01melse[39;00m:
[0;32m--> 175[0m     [38;5;28mself[39m[38;5;241m.[39mtree [38;5;241m=[39m tree
[1;32m    176[0m     [38;5;28mself[39m[38;5;241m.[39mfind_references()
[1;32m    177[0m [38;5;28;01mif[39;00m uri [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/asdf.py:590[0m, in [0;36mAsdfFile.tree[0;34m(self, tree)[0m
[1;32m    588[0m asdf_object [38;5;241m=[39m AsdfObject(tree)
[1;32m    589[0m [38;5;66;03m# Only perform custom validation if the tree is not empty[39;00m
[0;32m--> 590[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate[49m[43m([49m[43masdf_object[49m[43m,[49m[43m [49m[43mcustom[49m[38;5;241;43m=[39;49m[38;5;28;43mbool[39;49m[43m([49m[43mtree[49m[43m)[49m[43m)[49m
[1;32m    591[0m [38;5;28mself[39m[38;5;241m.[39m_tree [38;5;241m=[39m asdf_object

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/asdf.py:619[0m, in [0;36mAsdfFile._validate[0;34m(self, tree, custom, reading)[0m
[1;32m    617[0m [38;5;28;01melse[39;00m:
[1;32m    618[0m     tagged_tree [38;5;241m=[39m yamlutil[38;5;241m.[39mcustom_tree_to_tagged_tree(tree, [38;5;28mself[39m)
[0;32m--> 619[0m [43mschema[49m[38;5;241;43m.[39;49m[43mvalidate[49m[43m([49m[43mtagged_tree[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mreading[49m[38;5;241;43m=[39;49m[43mreading[49m[43m)[49m
[1;32m    620[0m [38;5;66;03m# Perform secondary validation pass if requested[39;00m
[1;32m    621[0m [38;5;28;01mif[39;00m custom [38;5;129;01mand[39;00m [38;5;28mself[39m[38;5;241m.[39m_custom_schema:

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:661[0m, in [0;36mvalidate[0;34m(instance, ctx, schema, validators, reading, *args, **kwargs)[0m
[1;32m    657[0m     [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01masdf[39;00m [38;5;28;01mimport[39;00m AsdfFile
[1;32m    659[0m     ctx [38;5;241m=[39m AsdfFile()
[0;32m--> 661[0m validator [38;5;241m=[39m [43mget_validator[49m[43m([49m[43mschema[49m[43m,[49m[43m [49m[43mctx[49m[43m,[49m[43m [49m[43mvalidators[49m[43m,[49m[43m [49m[43mctx[49m[38;5;241;43m.[39;49m[43mresolver[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    662[0m validator[38;5;241m.[39mvalidate(instance)
[1;32m    664[0m additional_validators [38;5;241m=[39m [_validate_large_literals]

File [0;32m/usr/share/miniconda/lib/python3.9/site-packages/asdf/schema.py:575[0m, in [0;36mget_validator[0;34m(schema, ctx, validators, url_mapping, _visit_repeat_nodes, _serialization_context, *args, **kwargs)[0m
[1;32m    569[0m [38;5;66;03m# We don't just call validators.validate() directly here, because[39;00m
[1;32m    570[0m [38;5;66;03m# that validates the schema itself, wasting a lot of time (at the[39;00m
[1;32m    571[0m [38;5;66;03m# time of this writing, it was half of the runtime of the unit[39;00m
[1;32m    572[0m [38;5;66;03m# test suite!!!).  Instead, we assume that the schemas are valid[39;00m
[1;32m    573[0m [38;5;66;03m# through the running of the unit tests, not at run time.[39;00m
[1;32m    574[0m [38;5;28mcls[39m [38;5;241m=[39m _create_validator(validators[38;5;241m=[39mvalidators, visit_repeat_nodes[38;5;241m=[39m_visit_repeat_nodes)
[0;32m--> 575[0m [38;5;28;01mreturn[39;00m [38;5;28;43mcls[39;49m[43m([49m[43mschema[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[43mctx[49m[38;5;241;43m=[39;49m[43mctx[49m[43m,[49m[43m [49m[43mserialization_context[49m[38;5;241;43m=[39;49m[43m_serialization_context[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

[0;31mTypeError[0m: __init__() got an unexpected keyword argument 'resolver'
TypeError: __init__() got an unexpected keyword argument 'resolver'

